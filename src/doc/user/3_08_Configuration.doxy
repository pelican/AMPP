namespace pelican {

/**
\page user_referenceConfiguration Configuration Files

\section user_referenceConfiguration_introduction Introduction

The configuration file allows control over all aspects of the
runtime binary. As well as things such as server IP addresses and port
information, the configuration file is also used to set parameters for
individual modules in the pipeline.

There are currently no default locations for pelican to search for configuration
files. You must specify the configuration file on the command line with the
\c --config option. Note that this may change in future revisions.

\section user_referenceConfiguration_structure File Structure

The configuration files are XML-based, and can be edited by hand using any
text editor. The document type is \c pelican and the root node tag is
\c configuration, which has a single \c version attribute.
The current configuration version is 1.0.

The most basic valid configuration file is:

\verbatim
<?xml version='1.0' encoding='UTF-8'?>
<!DOCTYPE pelican>
<configuration version="1.0">
</configuration>
\endverbatim

Inside the \c configuration tag there can be up to three sections, delimited
by their own tags:

\li \c pipeline
\li \c server
\li \c nodesets

Some or all of these sections may be present.
The \e pipeline section contains configuration details for the pipeline binary.
The \e server section contains configuration details for the server binary.
 \e Nodesets define groups of XML nodes that can be copied into specific
locations using an \c import tag.

There are a number of sub-sections allowed within the \e pipeline and \e server
tags.

Under \e pipeline, any of the following can be present in any order:

\li \c clients (configuration for data clients)
\li \c chunkers (configuration for data chunkers, if using a direct stream client)
\li \c adapters (configuration for data adapters)
\li \c modules (configuration for pipeline modules)

Under \e server, any of the following can be present in any order:

\li \c chunkers (configuration for data chunkers)
\li \c buffers (configuration for data buffers)

Within these sub-sections, the tag names must match the names of the objects
(i.e. the class names). Multiple different objects of the same type that need
different configurations can be distinguished by using the \c name attribute
in the class tag.

\subsection user_referenceConfiguration_structureExample Example

This is an example configuration file that contains both \e pipeline and
\e server sections. There are two chunkers of the same type that must connect
to different UDP ports, so the \c name attribute is used to disambiguate them.

\verbatim
<?xml version='1.0' encoding='UTF-8'?>
<!DOCTYPE pelican>
<configuration version="1.0">
<pipeline>
    <clients>
        <PelicanServerClient>
            <server host="127.0.0.1" port="2000"/>
            <data type="VisibilityData" adapter="AdapterStationVisibilities"/>
       </PelicanServerClient>
    </clients>

    <adapters>
        <AdapterStationVisibilities>
            <antennas number="2"/>
            <channels start="0" end="1"/>
            <polarisation value="both"/>
            <dataBytes number="8"/>
        </AdapterStationVisibilities>
    </adapters>
</pipeline>

<server>
    <buffers>
       <VisibilityData>
           <buffer maxSize="10000" maxChunkSize="10000"/>
       </VisibilityData>
    </buffers>

    <chunkers>
       <TestUdpChunker name="1">
           <connection host="127.0.0.1" port="2002"/>
           <data type="VisibilityData" chunkSize="512"/>
       </TestUdpChunker>
       <TestUdpChunker name="2">
           <connection host="127.0.0.1" port="2003"/>
           <data type="VisibilityData" chunkSize="512"/>
       </TestUdpChunker>
    </chunkers>
</server>
</configuration>
\endverbatim

\section user_referenceConfiguration_import Importing Configuration Data

The only reserved global tag name is the \c import tag, which
can be used to make preprocessor-like node substitutions.
This can be useful if, for example, modules share common configuration
options.

Import tags may be used anywhere under the root node, so the imported nodes
will be appended as children of the tag's parent node. The import source may
be a special set of nodes (a nodeset) or another XML configuration file.

\subsection user_referenceConfiguration_import_nodeset Importing Nodesets

Groups of common nodes can be declared as nodesets by enclosing them
inside \c nodeset tags within the \c nodesets section.
Each nodeset must be given a unique name using the \c name attribute,
so the nodeset can be copied into other locations in the document using
an <tt>import nodeset="[name]"</tt> tag. Nodes within the nodeset will be
appended to the end of the list of child nodes of the enclosing parent
regardless of where they appear, so that local settings will override those
from the nodeset if there is a conflict. It is possible for nodesets
themselves to import nodes from other nodesets.

\subsubsection user_referenceConfiguration_import_nodeset_example Example

For brevity, the XML header and root node have been omitted from this example.

\verbatim
<pipeline>
    <modules>
        <Module1>
            <parameter value="1"/>
            <import nodeset="set1"/>
        </Module1>
        <Module2>
            <import nodeset="set1"/>
            <parameter value="2"/>
        </Module2>
    </modules>
</pipeline>
<nodesets>
    <nodeset name="set1">
        <common1 value="first common parameter"/>
        <common2 value="second common parameter"/>
    </nodeset>
</nodesets>
\endverbatim

The preprocessor will transform this into the following XML:

\verbatim
<pipeline>
    <modules>
        <Module1>
            <parameter value="1"/>
            <!--% Imported nodeset set1-->
            <common1 value="first common parameter"/>
            <common2 value="second common parameter"/>
        </Module1>
        <Module2>
            <parameter value="2"/>
            <!--% Imported nodeset set1-->
            <common1 value="first common parameter"/>
            <common2 value="second common parameter"/>
        </Module2>
    </modules>
</pipeline>
<nodesets>
    <nodeset name="set1">
        <common1 value="first common parameter"/>
        <common2 value="second common parameter"/>
    </nodeset>
</nodesets>
\endverbatim

\subsection user_referenceConfiguration_import_file Importing Files

It is possible to import all the child nodes under the root node of a
document in another file.

To do this, use the <tt>import file="[file name]"</tt> tag.
If not an absolute path, the file name must be relative to the current working
directory.

\subsection user_referenceConfiguration_import_remote Importing Remote Files

The <tt>import url="[address]"</tt> tag is not currently implemented,
but is reserved for future use.

\section user_referenceConfiguration_configNode Obtaining Configuration Data

Objects that are configurable (which are currently pipeline modules, adapters,
chunkers and data clients) can obtain their settings using convenience methods
on the ConfigNode object passed to them in their constructors.

To get the text for a single option, call ConfigNode::getOption() with the
tag name and attribute name. The method returns a QString containing the
required data.

For example, a module might have this configuration XML in the \c modules
section:

\verbatim
<Module1>
    <option value="option"/>
    <parameter value="1.0"/>
</Module1>
\endverbatim

The configuration node for Module1 will be passed down in the module's
constructor. To get the parameter value, one could use:

\code
double param = configNode.getOption("parameter", "value").toDouble();
\endcode

\section user_referenceConfiguration_modules Common Module Options

In radio astronomy, it is usual to have to specify a subset of radio
frequencies and/or channel indices when working with radio telescope data.
This channel information often has to be supplied to many different
processing modules.

Frequency channels are specified in the XML configuration as

\verbatim <channels>1,5,182</channels> \endverbatim

or, for many contiguous channels,

\verbatim <channels start="0" end="511"/> \endverbatim

To obtain this channel list, there is a convenience method
ConfigNode::getUnsignedList(), which returns the list of channel indices in a
standard vector.

\code
std::vector<unsigned> = configNode.getUnsignedList("channels");
\endcode

\section user_referenceConfiguration_chunker Common Chunker Options

Chunkers can use any device, but usually work with network sockets.
For this reason, the chunker base class will look for
a \c connection tag in its configuration node, with attributes \c host
(the hostname or IP address) and \c port number.
This XML tag should be provided for all chunkers that use network sockets.

\verbatim <connection host="127.0.0.1" port="2001"/> \endverbatim

All chunkers must also declare the data type that they provide using the
<tt>data type="[type]"</tt> tag, for example:

\verbatim <data type="VisibilityData"/> \endverbatim

The data type string is the name of the data blob that will be eventually
filled by the adapter.

\section user_referenceConfiguration_dataClient Common Data Client Options

Data clients that connect to the Pelican server must specify the hostname
and port for the TCP connection, using the \c server tag:

\verbatim <server host="127.0.0.1" port="2000"/> \endverbatim

For each data type that the client can handle, there must also be a
corresponding adapter to deserialise the data stream into data blobs.
Use a \c data tag with the attributes \c type and \c adapter so that
the client knows which adapter to use for each data type.

\verbatim <data type="VisibilityData" adapter="MyAdapter"/> \endverbatim
When you have multiple adapters of the same type you can use the \c name
variable to specify a specific adapter configuration.

\verbatim <data type="VisibilityData" adapter="MyAdapter" name="configuration1"/> \endverbatim

There should be as many \c data tags as necessary, one for each data type.

\latexonly
\clearpage
\endlatexonly

*/

}
